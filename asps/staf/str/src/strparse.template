
*	This is a quick-substitute template for use in calling STRPARSE from
*	application programs.

*	To use STRPARSE, include this file and call STRPARSE as shown in the
*	example.

*	User modifies these:
	INTEGER NARGS_max !Maximum number of arguments available to be filled.
	PARAMETER (NARGS_max=10)

	INTEGER ARG_length !Argument length.
	PARAMETER (ARG_length=80)

*	STRPARSE returns with these:
	INTEGER NARGS !Number of arguments filled;  .le. NARGS_max.
	CHARACTER*(ARG_length) ARG(NARGS_max) !Filled with NARGS char. arguments from S.
	DOUBLE PRECISION DARG(NARGS_max) !ARGs translated as D.P. numbers, if possible.
	INTEGER IARG(NARGS_max) !ARGs translated as integer numbers, if possible.
	LOGICAL VDARG(NARGS_max) !Set true for each ARG with valid D.P. number.
	LOGICAL VIARG(NARGS_max) !Set true for each ARG with valid integer number.

*  STRPARSE call example -- "S" is a caller-supplied command-line character string:
*	SUBROUTINE STRPARSE(S,NARGS_max,NARGS,ARG,DARG,IARG,VDARG,VIARG)

*  STRPARSE Functional Description:
*	Parse out up to NARGS_max argument from S and into ARG, DARG and IARG.
*	Argument separators are:
*	space, tab, comma, and equal-sign.  The equal-sign is a special
*	separator in that it is also returned as an argument.  This permits
*	checking externally to STRPARSE that equal signs occur where they
*	are supposed to.

