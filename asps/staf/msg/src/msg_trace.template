

*	msg_trace.template -- the msg trace-message-calls template.

*	This is an msg template -- replace items enclosed in <brackets> with application-
*	specific values and names.  Some numbers, such as message-lengths of 132, may be
*	changed or kept, as needed;  the values shown are the most general or the most
*	common and almost always can be used as-is.  Inline comments indicate which of
*	these may be safely changed.  3 or more blank lines indicate application-specific
*	code may reside there.

*	Application-specified values:
*	<Subroutine Name>     CHARACTER*(*)
*	<Count Limit>         INTEGER*4
*	<Message Line Count>  INTEGER*4



*	A string for building multiple-line messages:
	INTEGER Max_lines_P
	PARAMETER (Max_lines_P = <Message Line Count>)
	CHARACTER*132 M132(Max_lines_P)                   !"132" may be changed as needed.

*	msg fast-reference ID for the trace message:
	INTEGER IDT1
	SAVE IDT1       !Keep it static, or it does no good.
	LOGICAL MSG_Enabled_Trace



	DATA IDT1 /0/   !Always initialize fast-reference IDs to zero.


*	Here's how to generate dormant trace messages -- they are skipped
*	until explicitly activated.  They should almost always be used
*	with fast-reference IDs (instead of -1), or they may contribute
*	significantly to CPU usage.

*	  Note:  Use Message inside of a MSG_Enabled_Trace block, since
*	  MSG_Enabled_Trace does not ever perform msg accounting -- it only tests
*	  the enabled status of the specified prefix: '<Subroutine Name>-T1'
*	  If Message_Out is used instead of Message (as would occur inside
*	  a MSG_Enabled block), then msg accounting is never performed
*	  for this message.
*	  If the prefix '<Subroutine Name>-T1' is undefined when this
*	  call occurs, it gets defined, and is initialized to be Inactive.
*	  The trace will become active only on a specific request, or
*	  on any wildcard request AFTER the trace message has been defined.

	IF (MSG_Enabled_Trace( '<Subroutine Name>-T1', IDT1 ) ) THEN
*	  This write is strictly an example -- it's a two-line message:
	  WRITE( M132, 101 ) Junque, Stuff, Nonsense
	  CALL Message( M132, 2, IDT1 ) !2 line message
	END IF
101	FORMAT('<Subroutine Name>-T1  Junque:  'I11'  Stuff:'E15.8 /
     1	       '                      Nonsense:'I11 )

*	Or, if no WRITE is needed:
	IF (MSG_Enabled_Trace( '<Subroutine Name>-T1', IDT1 ) ) THEN
	  CALL Message( '<Subroutine Name>-T1  No Junque, Stuff or Nonsense.', 1, IDT1 )
	END IF



*****************************************************************************************
*	These calls generally occur outside the subroutine containing the trace message:

*	Enable this trace message & specify no count-limit, from within the code:
	CALL MSG_Enable( '<Subroutine Name>-T1' )

*	Or, enable this trace message & specify no count-limit, with ASCII commands:
	CALL MSG_Set_by_Command( 'ENABLE <Subroutine Name>-T1' )
	CALL MSG_Set_by_Command( 'LIMIT  <Subroutine Name>-T1=<Count Limit>' )



*	Disable this trace message from within the code:
	CALL MSG_Disable( '<Subroutine Name>-T1' )

*	Or, disable this trace message with an ASCII command:
	CALL MSG_Set_by_Command( 'DISABLE <Subroutine Name>-T1' )
*****************************************************************************************
