#!/usr/bin/env perl
#
# STAR_LEVELS - Perl script to display STAR levels as string.
# Usage: STAR_LEVELS
#
# T. Wenaus, J. Lauret
#

$VERSION = $ENV{STAR_LEVEL};
if ( ! defined($VERSION) ){ $VERSION ="";}

if ($ARGV[0] eq "-g"){
    # Guesstimator
    $DEBUG = $ENV{STAR_LEVELS_DEBUG};

    if ( ! defined($shs = $ENV{STAR_HOST_SYS}) ){  $shs = "share";}
    print "STAR_HOST_SYS = $shs\n" if ($DEBUG);

    if ( -d "include" || -d ".$shs"){
	print "There is a possibility of guessing ..\n" if ($DEBUG);
	$version = "";

	foreach $inc (("include",".$shs/include",".$shs/include/tables")){
	    if ( -d $inc){
		if ( opendir(DIR,$inc) ){
		    print "Scanning $inc/ ...\n" if ($DEBUG);
		    while ( defined($file = readdir(DIR)) ){
			if ( -l "$inc/$file"){ next;}
			# This is a fix format defined in RootCint, stic and ConstructTable
			# If the format changes, the guesstimator will stop working
			if ( defined($ver = &Found("$inc/$file")) ){
			    print "\t\tFound version [$ver]\n" if ($DEBUG);
			    if ( $ver ne "(unspecified)"){
				$version = $ver;
				last;
			    }
			}
		    }
		    close(DIR);
		}
	    }
	    last if ( $version ne "");
	}
	# Second possibility is to look into STAR_HOST_SYS for some
	# files
	if ($version eq ""){
	    print "Scanning .$shs/share ...\n" if ($DEBUG);
	    if ( defined($shs = $ENV{STAR_HOST_SYS}) ){
		print "Scanning .$shs/share .$shs/* ...\n" if ($DEBUG);
		if ( -d ".$shs/share"){
		    print "Searching for LinkDef.h files ...\n" if ($DEBUG);
		    @all = `/usr/bin/find .$shs/share -type f -name '*LinkDef.h'`;
		    foreach $file (@all){
			chomp($file);
			print "\tGot $file\n" if ($DEBUG);
			if ( defined($ver = &Found($file)) ){
			    $version = $ver;
			    last;
			}
		    }
		}
		# if still not found, try more aggressively
		if ( $version eq ""){
		    print "Search deeper for LinkDef.h files ...\n" if ($DEBUG);
		    $O = "";
		    $O = "obj" if ( -d ".$shs/obj/StRoot");
		    $O = "OBJ" if ( -d ".$shs/OBJ/StRoot");
		    if ( $O ne ""){
			@all = `/usr/bin/find .$shs/$O/StRoot/ -type f -name '*LinkDef.h'`;
			foreach $file (@all){
			    chomp($file);
			    print "\tGot $file\n" if ($DEBUG);
			    if ( defined($ver = &Found($file)) ){
				$version = $ver;
				last;
			    }
			}
		    }
		}
	    }
	}

	if ($version ne "" && $version !~ /unspecified/){
	    if ( lc($version) ne lc($VERSION) ){
		if ($version ne "adev" || lc($VERSION) ne "dev") {
		    print "Missmatching STAR environment (now in ".$VERSION.")\n";
		}
		print "$version was the previous version this code was compiled with !!!\n";
	    } else {
		print "$version was the version this code was previously compiled in. All is OK.\n";
	    }
	} else {
	    print STDERR "Could not guess the library version you compiled your code in\n";
	}
    } else {
	print STDERR "Cannot guess the version (missing include/)\n";
    }
} else {
    # some Uglix print to STDERR
    open(STDERR,">/dev/null");
    chomp($pgmf = `which root4star`);
    close(STDERR);
    # some to STDOUT
    if ($pgmf =~ /no root4star in/i){ $pgmf = "";}

    if ( $pgmf ne "" ){
	$createTime = (stat($pgmf))[10];
	($cmin,$chr,$cdy,$cmo,$cyr) = (localtime($createTime))[1,2,3,4,5];
	$cmo = $cmo +1;
	$year = $cyr - 100;
	if ( $cyr > 99 ) {$year = sprintf("%2.2d", $cyr - 100 )}
	$pgmf =~ s,/afs/rhic/star/packages/,,g;
	$pgmf =~ s,/afs/rhic\.bnl\.gov/star/packages/,,g;
	$pgmf =~ s,/bin/root4star,,g;
    } else {
	$pgmf = "unknown";
	$cmo  = $cdy = $year = $chr = $cmin = "?";
    }
    chomp($host = `/bin/hostname`);

    $ROOT = "ROOT-$ENV{ROOT_LEVEL}";
    if ( defined($tmp = $ENV{QTDIR}) ){ $tmp =~ s/.*\///; $ROOT .= "-$tmp";}

    print "$host;CERN-$ENV{CERN_LEVEL};$ROOT;STAR-$VERSION;root4star-$cmo/$cdy/$year-$chr:$cmin-$pgmf\n";
}


#
# Subroutine to /usr/bin/find the version from a file
#
sub Found
{
    my($file)=@_;
    my($ver)=undef;

    if ( open(FF,$file) ){
	print "\tReading $file\n" if ($DEBUG);
	while( defined($line = <FF>) ){
	    if ( $line =~ m/(This was generated for version )(.*)/){
		$ver = $2;
		last;
	    }
	}
	close(FF);
    }
    if ( defined($ver) ){  
	$ver =~ s/\'//g;
	$ver =~ s/\*.*//g;
	$ver =~ s/\s+//g;
    }
    $ver;
}
