#!/usr/bin/env perl
#
# STAR_LEVELS - Perl script to display STAR levels as string.
# Usage: STAR_LEVELS
#
# T. Wenaus, J. Lauret
#

if ($ARGV[0] eq "-g"){
    # Guesstimator
    $DEBUG = 0;

    if ( ! defined($shs = $ENV{STAR_HOST_SYS}) ){  $shs = "share";}
    print "STAR_HOST_SYS = $shs\n" if ($DEBUG);

    if ( -d "include" || -d ".$shs"){
	print "There is a possibility of guessing ..\n" if ($DEBUG);
	$version = "";

	if ( -d "include"){        $inc = "include";}
	if ( -d ".$shs/include"){  $inc = ".$shs/include";}

	if ( opendir(DIR,$inc) ){
	    print "Scanning $inc/ ...\n" if ($DEBUG);
	    while ( defined($file = readdir(DIR)) ){
		if ( -l "$inc/$file"){ next;}
		# This is a fix format defined in RootCint, stic and ConstructTable
		# If the format changes, the guesstimator will stop working
		if ( defined($ver = &Found("$inc/$file")) ){
		    $version = $ver;
		    last;
		}
	    }
	    close(DIR);
	}
	# Second possibility is to look into STAR_HOST_SYS for some
	# files
	if ($version eq ""){
	    print "Scanning .$shs/share ...\n" if ($DEBUG);
	    if ( defined($shs = $ENV{STAR_HOST_SYS}) ){
		if ( -d ".$shs/share"){
		    print "Searching for LinkDef.h files ...\n" if ($DEBUG);
		    @all = `find .$shs/share -type f -name '*LinkDef.h'`;
		    foreach $file (@all){
			chomp($file);
			print "\tGot $file\n" if ($DEBUG);
			if ( defined($ver = &Found($file)) ){
			    $version = $ver;
			    last;
			}
		    }
		}
	    }
	}

	if ($version ne ""){
	    if ($version ne $ENV{STAR_LEVEL} && 
		($version ne "adev" && $ENV{STAR_LEVEL} ne "dev") ){
		print "Wrong STAR environment\n";
	    }
	    print "$version was the version this code was previously compiled in ...\n";
	} else {
	    print STDERR "Could not guess the library version you compiled your code in\n";
	}
    } else {
	print STDERR "Cannot guess the version (missing include/)\n";
    }
} else {
    chomp($pgmf = `which root4star`);
    if ( $pgmf ne "" ){
	$createTime = (stat($pgmf))[10];
	($cmin,$chr,$cdy,$cmo,$cyr) = (localtime($createTime))[1,2,3,4,5];
	$cmo = $cmo +1;
	$year = $cyr - 100;
	if ( $cyr > 99 ) {$year = sprintf("%2.2d", $cyr - 100 )}
	$pgmf =~ s,/afs/rhic/star/packages/,,g;
	$pgmf =~ s,/bin/root4star,,g;
    } else {
	$pgmf = "unknown";
	$cmo  = $cdy = $year = $chr = $cmin = "?";
    }
    chomp($host = `hostname`);
    print "$host;CERN-$ENV{CERN_LEVEL};STAR-$ENV{STAR_LEVEL};root4star-$cmo/$cdy/$year-$chr:$cmin-$pgmf\n";
}


#
# Subroutine to find the version from a file
#
sub Found
{
    my($file)=@_;
    my($ver)=undef;

    if ( open(FF,$file) ){
	print "\tReading $file\n" if ($DEBUG);
	while( defined($line = <FF>) ){
	    if ( $line =~ m/(This was generated for version )(.*)/){
		$ver = $2;
		last;
	    }
	}
	close(FF);
    }
    if ( defined($ver) ){  $ver =~ s/\'//g;}
    $ver;
}
