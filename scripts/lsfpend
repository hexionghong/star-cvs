#!/usr/bin/env perl

#
# Written J. Lauret 2005
# Extract pending reasons from bjobs and summarize
#

if ( ! defined($ARGV[0]) ){
    $user = &GetLogin();
} else {
    $user = $ARGV[0];
}

$| = 1;
$file = "/tmp/lsfpend.$$";
`bjobs -u $user -l >$file`;
if ( ! open(FI,$file) ){
    die "Could not open $file for read\n";
} else {
    # print "File /tmp/lsfpend.$$ opened\n";
}


$extra = "";
$first = 1;


while ( defined($line = <FI>) ){
    chomp($line);
    if ($line =~ m/^Job/){
	$next = <PIPE>;
	do {
	    $next =~ s/^\s*(.*?)\s*$/$1/;
	    $line = $line.$next;
	    $next = <FI>;
	} while ( $next !~ m/^\w+/ );
	
	if ( $line =~ m/(Status\s+)(.*)(,\s+Queue\s+)(.*)(,\s+Job.*,\s+Command\s+)(.*)/i){
	    $status = $2;
	    $queue  = $4;
	    $jobfile= $6;    
	    #print "[$1][$2][$3][$4][$5][$6]\n";
	}

	if (length($jobfile) >= 50 ){
	    $jobfile = "...".substr($jobfile,length($jobfile)-50+3,50-3);
	}
	$jobfile =~ s/[<>]//g;
	$queue   =~ s/[<>]//g;

	if ( defined($STATE{$status}) ){
	    $STATE{$status}+=1;
	} else {
	    $STATE{$status}=1;
	}
	if ( defined($QUEUE{$queue}) ){
	    $QUEUE{$queue}+=1;
	} else {
	    $QUEUE{$queue}=1;
	}

	if ($first){
	    printf 
		"%50.50s %25.25s %10.10s\n",
		"Job File","Queue","Status";
	    print "---------------------------------------------------------------------------------------\n";
	    $first = 0;
	}


	printf 
	    "%50.50s %25.25s %10.10s\n",
	    $jobfile,$queue,$status;

	# Reset other variables
	$getpending = 0;
	$extra      = "";

    } 

    #print "/$line/\n";

    if ( $line =~ /PENDING REASON/i){
	$getpending = 1;
	$line =~ s/.*PENDING REASON//;
	#print "--- [Stripping head]\n";

    } elsif ( $line eq ""){
	if ( $getpending && $extra ne ""){
	    if ( defined($PENDR{$extra}) ){
		$PENDR{$extra}+=1;
	    } else {
		$PENDR{$extra}=1;
	    }
	    print "\t\t$extra\n";
	    $getpending = 0;
	    $extra      = "";
	}
    }

    if ( $getpending >= 1){
	#print "---- [Append line]\n";	
	$extra .= $line if ($getpending++ > 1);
    }

}

print 
    "\n",
    "Summary for $user\n" if (!$first);

foreach $status ( keys %STATE){  printf "\tStatus %5.5d %s\n",$STATE{$status},$status;}
foreach $queue  ( keys %QUEUE){  printf "\tQueue  %5.5d %s\n",$QUEUE{$queue}, $queue; }
foreach $extra  ( keys %PENDR){  printf "\tReason %5.5d %s\n",$PENDR{$extra}, $extra; }




sub GetLogin
{
    
    my($user) = getpwuid($<);

    # whoami command does not exists on some systems). 
    # id always works unless
    # there is a problem and interraction in
    # the .cshrc/.login. The pattern should save
    # us.
    if ( ! defined($user) ){
	chomp($user = `id`);
	$user =~ m/(uid=\d+\()(.*)\)(\s+gid=)/;
	$user = $2;
    }

    $user;
}



