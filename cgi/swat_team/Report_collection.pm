#! /usr/bin/perl 
#
# collection of swap reports
#
# pmj 31/7/00
#
#=========================================================
package Report_collection;
#=========================================================
use CGI qw/:standard :html3/;
use CGI::Carp qw(fatalsToBrowser);

use Cwd;

use File::stat;
use File::Path;

use File::Copy;
use File::Find;
use File::Basename;

use Data::Dumper;

use strict;

#=========================================================
1.;
#=========================================================

sub new{
  my $classname = shift;
  my $self = {};
  bless ($self, $classname);

  # initialize
  $self->_init(@_);

  return $self;
}
#========================================================
sub _init{

  my $self = shift;
  my $name = shift;
  my $report_dir = shift;

  $self->CollectionName($name);
  $self->ReportDir($report_dir);

  #---------------------------------------------------------------------------

  opendir DIR, $report_dir or die "Cannot open directory $report_dir<br>\n";

  my $file;

  while (defined ($file = readdir(DIR) ) ){
    
    $file =~ /\.txt$/ or next;

    my $full_file = "$report_dir/$file";

    my $report = new Report_object($full_file);
    $self->Add($report);
  
  }

  closedir(DIR);

}
#========================================================
sub CollectionName{
  my $self = shift;
  @_ and $self->{CollectionName} = shift;
  return $self->{CollectionName};
}
#========================================================
sub ReportDir{
  my $self = shift;
  @_ and $self->{ReportDir} = shift;
  return $self->{ReportDir};
}
#========================================================
sub Add{
  my $self = shift;

  #------------------------------------------------------

  # adds report to collection
  @_ and do{
    my $report = shift;
    push @{ $self->{Reports} }, $report;

    # give process a pointer to this chain object
    $report->Collection($self);

  };

  return;
}
#========================================================
sub Display{

  my $self = shift;
#---------------------------------------------------------------------------
# sort reports
  
  my @reports_unsorted = @{ $self->{Reports} };

  my @reports = sort { $b->LastModified() <=> $a->LastModified() } @reports_unsorted;

  # put back into hash for printing index
  @{ $self->{Reports} } = @reports;

#---------------------------------------------------------------------------
  $self->PrintIntro();
#---------------------------------------------------------------------------
  $self->PrintIndex();
#---------------------------------------------------------------------------
  foreach my $report ( @reports){
    $report->Display();
  }
#---------------------------------------------------------------------------
  $self->HowTo();
#---------------------------------------------------------------------------
  $self->PrintContacts();
#---------------------------------------------------------------------------

}

#==========================================================================
sub PrintIntro{

  my $self = shift;

  print<<EOF;
<p>This page is intended to provide a central location for results related
to the understanding of common issues underlying STAR Data Analysis. There
is a large and growing variety of work being done on STAR data by many
people (not just the SWAT Team) and it has become impossible even for the
full-time experts to keep track of all the important discussions. We will
attempt to keep this page current with the various discussion streams,
providing a summary for non-experts, along with links to a limited number
of important plots. More detail can be found in the email archives, principally
starsoft-l.
EOF

  print "<br><br><a href=\"\#HowTo\">How to submit a report to this page</a>";
  print "<br><a href=\"\#Contacts\">Contacts</a>";

}
#==========================================================================
sub HowTo{

  my $self = shift;

  my $report_dir = $self->ReportDir();
 
  #-----------------------------------------------------------------------------

  print "<hr>";

  my $title = "How to submit a report to this page";

  print h3("<a name=HowTo>$title</a>"); 

  print<<EOF;

This page is automatically generated by a PERL CGI script from text
files residing in a directory defined in the script. This directory is
currently <font color=red>$report_dir</font>.  All files of type .txt
in this directory will be parsed for content and this page (including
the index) will be generated. The files follow a few simple
conventions (defined below) that are trivial to use and permit the CGI
script to format the report clearly.

<p>To add a status report on a new topic, simply place a new file of
type \".txt\" in the above directory and it will appear automatically
on this page (remember to refresh your browser to see the
change). Changes to an existing file will generate a new "last
modified" date and time.

<p>The files look like:
<pre>
rcas6006.rcf.bnl.gov{jacobs}232: cat Vertex_Finding.txt
&lt;title&gt;Vertex Finding for Nuclear Collisions

&lt;author&gt;Javier Castillo, Spiros Margetis, Peter Jacobs

&lt;issue&gt; assess vertex finding efficiency and contamination for nuclear
collisions at low multiplicity

&lt;physics&gt; determine fraction (and error on fraction) of total inelastic
cross section we are including in our N_charged distribution for nuclear
collisions.

&lt;status&gt; Two different vertex finders are currently used, depending upon
number of global tracks. For greater than 15 global tracks, EVR is
used and appears to be highly efficient and background-free. For 15
global tracks or fewer in the event, LMV is used. For nuclear
collisions (defined as ZDC coincidence and at least 2 global tracks),
there appears to be considerable contamination, under investigation.

&lt;links&gt;
&lt;a href=\"http://sol.star.bnl.gov/protected/reco/jecc/triggers\"&gt;Javiers
plots in protected area&lt;/a&gt;

rcas6006.rcf.bnl.gov{jacobs}233:
</pre>

The various fields appearing in the report on a single topic are
defined by blocks of text separated by blank lines. Each text block is
idenitified by an html-like tag (not true html) such as &lt;title&gt;
or &lt;author&gt;. The text itself is interpreted as true html, so
that links, emphasis, colours, etc. can be used (see for instance the
&lt;links&gt; section in the example). Lines beginning with a pound
sign (#) will be treated as a comment and ignored. The file should be
terminated with a blank line.



EOF

}
#==========================================================================
sub PrintContacts{

  my $self = shift;
 
  print "<hr>";
 
  print<<EOF;
<a NAME="Contacts"></a>Contacts: <i>
<a href="mailto:pmjacobs\@lbl.gov, ullrich\@star.physics.yale.edu,margetis\@faisun.kent.edu">
pmjacobs\@lbl.gov,ullrich\@star.physics.yale.edu,margetis\@faisun.kent.edu</a></i>
EOF

}
#==========================================================================
sub PrintIndex{

  my $self = shift;

  print "<hr>";
 
  print h3("Index (most recently modified is first)");

#---------------------------------------------------------------------------

  print "<ol>";

  my @reports = @{ $self->{Reports} };

  foreach my $report ( @reports){
    my $title = $report->Title();
    my $tag = $report->Tag();

    print "<li><a href=\"\#$tag\">$title</a>";
  }

  print "</ol>\n";

  #---------------------------------------------------------------------------

}

