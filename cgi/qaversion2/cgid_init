#! /opt/star/bin/perl

# cgid_init
#
# BEN(6jul00):  cgid_init makes sure cgid and ssh port frowarding from the web
# server are working on rcas6001.  It can be run manually or from a cron job.
# From a cron job, you should not use the "-v" flag, which prints debugging
# info.
#
# cgid_init also allows the user to shut down cgid and the ssh forwarding in
# one step, with "cgid_init -k".  
#
# "cgid_init -q" takes no action, but
# shows the pid of ssh & cgid, or 0 if not running (implies "-v")
#
# cgid_init runs reauth if no afs token for starlib is found.  It should be
# run only by starlib.
#

use strict;
use Cwd;
use FileHandle;
use Getopt::Std;

#my $qaPath = "/star/u2e/starqa/cgi-bin/pro/cgi/qaversion2";  # run pro version
my $qaPath = "/star/u2e/bnorman/cgi-bin/qa";  # run pro version
my $webServer = "sol.star.bnl.gov";
my $sleepCmd = "/star/rcf/qa/.sleeper";
my $afsPwFile = "/star/rcf/qa/.starlib_CGI";

# get options
my %opt = ();
getopt('', \%opt);
my $kill = $opt{k};
my $query = $opt{q};
my $verbose = $opt{v} || $query;

# collect the dead kids
$SIG{CHLD} = 'reaper';

# don't buffer output
STDERR->autoflush(1);
STDOUT->autoflush(1);

#
# check for reauth running for starlib on rcas and restart it if
# necessary.  reauth refreshes afs tokens automatically, and we
# need a token before we can write to afs space.
#

my $token = `tokens`;

if ($token !~ /^User/m) {   # token line in output
    print STDERR "(re)starting reauth...\n";
    system("killall reauth; cat $afsPwFile | reauth 85000 starlib");
    print STDERR "...reauth (re)started\n";
}

# check for ssh running
my $pid = getPID("root", "8080");
$verbose && print "ssh pid = $pid\n";
if (!$query){
    if (!$pid && !$kill ){             #start it
	print "starting ssh...\n";
	
	system("ssh -x -f -R 8080:localhost:8080 $webServer $sleepCmd")
	    or die "could not run ssh forwarding"; 
	
	print "...ssh started\n";
    } elsif ($pid && $kill){           #stop it
	print "stopping ssh...\n";
	
	system("kill $pid") 
	    or die "could not kill ssh forwarding";
	
	print "...ssh stopped\n";
    }
}

# check for cgid running
$pid = getPID("starlib","./cgid\$"); 
$verbose && print "cgid pid = $pid\n";
if (!$query){
    if (!$pid && !$kill){
	chdir $qaPath or die "cannot chdir to $qaPath\n";
	print "starting cgid in " . getcwd() . "...\n";
	
	system("./cgid &") 
	    or die "could not run cgid";

	print "...cgid started\n";
    }elsif ($pid && $kill){
	print "stopping cgid...\n";
	
	system("kill -INT $pid")
	    or die "could not kill cgid";
	
	print "...cgid stopped\n";
    }
}

exit 0;

# extract PID from the first line of the output of ps for the given 
# user and grep search string
sub getPID{
    my $user = shift;
    my $search = shift;

    my $cmd = "ps -flu $user | grep '$search' | grep -v grep";
    my $result = `$cmd`;
    #print "cmd = $cmd\n";
    #print "result = $result\n";

    if ($result ne ""){
	my @fields = split(' ', $result);
	return $fields[3];
    }else{
	return 0;
    }
}

sub reaper{
    my $waitpid = wait;
    $SIG{CHLD} = 'reaper';
}





